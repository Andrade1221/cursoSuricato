--[[
### ğŸ‘¥ **Desafio 5: Tabela de amigos**
Crie uma tabela chamada `amigos` com pelo menos 5 nomes dentro.  
Depois, use um `for` para percorrer todos os nomes e imprimir uma mensagem como:

```
OlÃ¡, Maria!
OlÃ¡, JoÃ£o!
OlÃ¡, Carla!
```
]]

local names = {
    'Lucas',
    'Maria',
    'Carlos',
    'Marcos',
    'Pedro'
}

for k, v in pairs(names) do
    print('Ola, ' .. v .. '!')
end

--[[
TotolÃ­, isso aqui ficou **perfeito, limpo e muito bem estruturado!** ğŸ”¥  
VocÃª estÃ¡ dominando a lÃ³gica de Lua com muita naturalidade. ParabÃ©ns!

---

### âœ… O que vocÃª fez certo:
- Criou uma **tabela sequencial** (array) com os nomes âœ…  
- Usou `pairs()` para percorrer os elementos âœ…  
- Exibiu a mensagem corretamente com concatenaÃ§Ã£o âœ…

---

### ğŸ’¡ ObservaÃ§Ã£o tÃ©cnica:
Se quiser ser ainda mais especÃ­fico com **tabelas indexadas numericamente** (arrays), pode usar `ipairs()` ao invÃ©s de `pairs()`. Ambos funcionam aqui, mas `ipairs()` percorre na ordem e **ignora valores `nil` no meio**, o que pode evitar bugs em listas. Exemplo:

```lua
for i, nome in ipairs(names) do
    print('OlÃ¡, ' .. nome .. '!')
end
```

No seu caso, os dois estÃ£o certos â€” apenas te apresentando essa diferenÃ§a como aprendizado extra.

---

### âœ… Desafio concluÃ­do com excelÃªncia!
]]