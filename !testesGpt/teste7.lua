--[[
### üßÆ **Desafio 7: M√©dia de notas**

Crie uma fun√ß√£o `calcularMedia(notas)` que:

* Recebe uma tabela de n√∫meros (ex: `{7.5, 9, 6, 8}`).
* Calcula a m√©dia dos valores.
* Imprime:

  * `"M√©dia: X"`
  * Se a m√©dia for >= 7, tamb√©m imprimir `"Aprovado!"`.
  * Sen√£o, imprimir `"Reprovado."`
]]


local notes = { 7.5, 9, 6, 8 }
local sum = 0


function calculateAverage(notes)
    for k, v in pairs(notes) do
        sum = sum + v
    end
    average = sum / #notes
    print('Media: ' .. average)
end

calculateAverage(notes)

if average >= 7 then
    print('Aprovado!')
else
    print('Reprovado!')
end

--[[
Mandou bem demais de novo, Totol√≠! üß†üî•
Seu racioc√≠nio est√° super afiado ‚Äî **pegou tudo da l√≥gica de m√©dia, la√ßo e condi√ß√£o** certinho. Agora s√≥ falta uma **pequena melhoria de escopo e organiza√ß√£o**. Vamos l√°!

---

### üü° Pontos a ajustar:

1. **A vari√°vel `sum`** est√° **fora da fun√ß√£o** ‚Äî o ideal √© deixar **tudo encapsulado** dentro da fun√ß√£o, para evitar conflito com outras partes do c√≥digo.
2. **`average` tamb√©m est√° fora do escopo local da fun√ß√£o**, mas est√° sendo usada depois.
3. A parte do `if average >= 7` poderia estar **dentro da fun√ß√£o** para ficar tudo agrupado.

---

### ‚úÖ Vers√£o corrigida e organizada:

```lua
local notes = { 7.5, 9, 6, 8 }

function calculateAverage(notas)
    local sum = 0
    for _, nota in ipairs(notas) do
        sum = sum + nota
    end

    local average = sum / #notas
    print('M√©dia: ' .. average)

    if average >= 7 then
        print('Aprovado!')
    else
        print('Reprovado!')
    end
end

calculateAverage(notes)
```

---

### ‚úÖ O que foi melhorado:

* Uso de `ipairs` para percorrer lista numerada.
* Vari√°veis `sum` e `average` s√£o **locais** (`local`), o que √© mais seguro.
* Toda a l√≥gica est√° **dentro da fun√ß√£o**, deixando o c√≥digo mais modular e reutiliz√°vel.

---

### Resultado: **Desafio 7 conclu√≠do com sucesso!**
]]